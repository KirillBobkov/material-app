{"version":3,"file":"static/js/236.17e05c42.chunk.js","mappings":"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","sources":["components/Quote/Quote.tsx","components/Counter/Counter.tsx","state/PostsStore.ts","components/Post/Post.tsx","pages/Posts/Posts.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { AxiosResponse } from 'axios';\r\n\r\nimport * as api from '../../api';\r\n\r\nimport { IQuote, IQuoteResponse } from '../../interfaces/IQuoteResponse';\r\n\r\ntype StyledSpanType = {\r\n  isVisible: boolean;\r\n};\r\n\r\ntype StyledParagraphType = {\r\n  isVisible: boolean;\r\n};\r\n\r\nconst StyledSection  = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 40px;\r\n  background-color: gray;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  min-height: 250px;\r\n`;\r\n\r\nconst StyledParagraph  = styled.span<StyledParagraphType>`\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n  font-size: 16px;\r\n  color: white;\r\n  transition: opacity .5s;\r\n  margin: 0;\r\n  margin-bottom: 20px;\r\n  opacity: ${props => props.isVisible ? 1 : 0};\r\n`;\r\n\r\nconst StyledSpan  = styled.span<StyledSpanType>`\r\n  font-size: 12px;\r\n  color: white;\r\n  font-weight: 700;\r\n  transition: opacity .5s;\r\n  opacity: ${props => props.isVisible ? 1 : 0};\r\n`;\r\n\r\nconst getInitialState = (): IQuote =>  ({\r\n  author: '',\r\n  tag:   '',\r\n  text: '',\r\n});\r\n\r\nconst Quote = (): JSX.Element => {\r\n  const [quote, setQuote] = useState<IQuote>(getInitialState());\r\n\r\n  useEffect(() => {\r\n    const fetchQuote = async () =>  {\r\n      const res: AxiosResponse<IQuoteResponse>  = await api.quotes.getRandomQuote();\r\n      setQuote(res.data.quotes[0]);\r\n    };\r\n\r\n    fetchQuote();\r\n  }, []);\r\n\r\n  return (\r\n    <StyledSection>\r\n      <StyledParagraph isVisible={!!quote.text}>{quote.text}</StyledParagraph>\r\n      <StyledSpan isVisible={!!quote.author}>{quote.author}</StyledSpan>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n  count: number;\r\n}\r\n\r\nconst StyledCounter  = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background-color: #ffffff;\r\n\r\n  h6, h1 {\r\n    margin: 0;\r\n  }\r\n\r\n  h6 {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst Counter = ({ count }: Props): JSX.Element => (\r\n  <StyledCounter>\r\n    <h6>TOTAL POSTS</h6>\r\n    <h1>{`${count}`}</h1>\r\n  </StyledCounter>\r\n);\r\n\r\nexport default observer(Counter);\r\n","import { computed, flow, makeObservable, observable } from 'mobx';\r\n\r\nimport api from '../api/posts';\r\n\r\nimport { IPost } from '../interfaces/IPost';\r\n\r\nclass PostsStore {\r\n  public posts: IPost[] = [];\r\n\r\n  public error = '';\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      posts: observable,\r\n      error: observable,\r\n      postsLength: computed,\r\n      fetchPosts: flow.bound,\r\n      deletePost: flow.bound,\r\n      updatePost: flow.bound,\r\n    });\r\n  }\r\n\r\n  *fetchPosts() {\r\n    try {\r\n      const { data }: { data: IPost[] } = yield api.getPosts();\r\n      this.posts = data.slice(0, 10);\r\n    } catch (e: any) {\r\n      this.error = e.message || 'Error while fetching post';\r\n    }\r\n  }\r\n\r\n  *deletePost(id: string) {\r\n    try {\r\n      yield api.deletePost(id);\r\n\r\n      const postIndex = this.posts.findIndex((post: IPost): boolean => post.id === id);\r\n    \r\n      this.posts.splice(postIndex, 1);\r\n    } catch (e: any) {\r\n      this.error = e.message || 'Error while deleting post';\r\n    }\r\n  }  \r\n    \r\n  *updatePost(id: string, data: IPost) {\r\n    try {\r\n      const { data: newData }: { data: IPost } = yield api.updatePost(id, data);\r\n            \r\n      const postIndex = this.posts.findIndex((post: IPost): boolean => post.id === id);\r\n    \r\n      this.posts[postIndex] = newData;\r\n    } catch (e: any) {\r\n      this.error = e.message || 'Error while updating post';\r\n    }\r\n  }   \r\n\r\n  get postsLength(): number{\r\n    return this.posts.length;\r\n  }\r\n}\r\n\r\nexport default new PostsStore();\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { IPost } from '../../interfaces/IPost';\r\n\r\nimport PostsStore from '../../state/PostsStore';\r\n\r\nimport Button from '../Button';\r\n\r\n\r\nconst StyledLi = styled.li<{ isFetching: boolean }>`\r\n  width: 500px;\r\n  background-color: #ffffff;\r\n  box-sizing: border-box;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);\r\n  ${props => props.isFetching ? 'filter: blur(2px);' : ''}\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  padding: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  display: block;\r\n  width: 100%;\r\n  height: 200px;\r\n  padding: 10px;\r\n  font-family: Poppins-Regular;\r\n  font-size: 14px;\r\n  resize: none;\r\n  border: none;\r\n  background-color: #e1e1e1;\r\n  color: #000000;\r\n\r\n  &:focus {\r\n    outline: 1px solid transparent;\r\n  }\r\n`;\r\n\r\nconst TextAreaBlack = styled(TextArea)`\r\n  height: 65px;\r\n  background-color: #000000;\r\n  color: #ffffff;\r\n`;\r\n\r\ninterface Props {\r\n  post: IPost;\r\n}\r\n\r\nconst getInitialState = (): IPost => ({\r\n  userId: 0,\r\n  id:   '',\r\n  title: '',\r\n  body: '',\r\n});\r\n\r\nconst Post = ({ post }: Props ): JSX.Element => {\r\n  const [isEditing, setIsEditing] = useState<boolean>(false);\r\n  const [currentPost, setCurrentPost] = useState<IPost>(getInitialState());\r\n  const [isFetching, setIsFetching] = useState<boolean>(false);\r\n  const { deletePost, updatePost } = PostsStore;\r\n\r\n  useEffect((): void => setCurrentPost({ ...post }), [post]);\r\n\r\n  const onSaveChanges = async (): Promise<any> => {\r\n    setIsFetching(true);\r\n    await updatePost(post.id, currentPost);\r\n    setIsEditing(!isEditing);\r\n    setIsFetching(false);\r\n  };\r\n\r\n  const onEditPost = (): void => {\r\n    setIsEditing(!isEditing);\r\n  };\r\n\r\n  const onCancelEditing = (): void => {\r\n    setIsEditing(!isEditing);\r\n    setCurrentPost({ ...currentPost, title: post.title, body: post.body });\r\n  };\r\n\r\n  return (\r\n    <StyledLi isFetching={isFetching}>\r\n      {isEditing ? \r\n        <>\r\n          <TextAreaBlack\r\n            value={currentPost.title}\r\n            onChange={(e: any): void => { if (e.target.value.length < 100 ) setCurrentPost({ ...currentPost, title: e.target.value }); }}\r\n          />\r\n          <TextArea\r\n            value={currentPost.body}\r\n            onChange={(e: any): void => { if (e.target.value.length < 400 ) setCurrentPost({ ...currentPost, body: e.target.value }); }}\r\n          />\r\n        </>\r\n        :\r\n        <>\r\n          <TextAreaBlack\r\n            value={currentPost.title}\r\n            disabled\r\n          />\r\n          <TextArea\r\n            value={currentPost.body}\r\n            disabled\r\n          />\r\n        </>\r\n      }\r\n      <ButtonContainer>\r\n        <Button onClick={() => deletePost(post.id)}>Delete post</Button>\r\n        {!isEditing && <Button color=\"#7a7a7a\" onClick={onEditPost}>Edit post</Button>}\r\n        {isEditing && <Button color=\"#7a7a7a\" onClick={onSaveChanges}>Save post</Button>}\r\n        {isEditing && <Button color=\"#afafaf\" onClick={onCancelEditing}>Cancel changes</Button>}\r\n      </ButtonContainer>\r\n    </StyledLi>\r\n  );\r\n};\r\n\r\nexport default observer(Post);","import React, { useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport styled from 'styled-components';\r\n\r\nimport Counter from '../../components/Counter';\r\nimport Post from '../../components/Post';\r\nimport Spinner from '../../components/Spinner';\r\nimport Quote from '../../components/Quote';\r\n\r\nimport PostsStore from '../../state/PostsStore';\r\n\r\nimport { IPost } from '../../interfaces/IPost';\r\n\r\nconst StyledUl = styled.ul`\r\n  display: flex;\r\n  box-sizing: border-box;\r\n  list-style: none;\r\n  padding: 0 10px;\r\n  margin-bottom: 80px;\r\n  flex-wrap: wrap;\r\n  gap: 40px;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Posts = (): JSX.Element => {\r\n  const { fetchPosts, postsLength, posts } = PostsStore;\r\n  \r\n  useEffect((): void => { \r\n    window.scrollTo(0, 0);\r\n    fetchPosts(); \r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      <Quote />\r\n      {!!postsLength && <Counter count={postsLength} />}\r\n      {posts.length \r\n        ? \r\n        <StyledUl>{posts.map((post: IPost): JSX.Element => <Post key={post.id} post={post} />)}</StyledUl>\r\n        :  <Spinner size={50}/>}\r\n      <Quote />\r\n    </div>\r\n  );\r\n};\r\n  \r\nexport default observer(Posts);"],"names":["StyledSection","styled","StyledParagraph","props","isVisible","StyledSpan","useState","author","tag","text","quote","setQuote","useEffect","fetchQuote","api","res","data","quotes","StyledCounter","observer","count","PostsStore","posts","error","makeObservable","this","observable","postsLength","computed","fetchPosts","flow","deletePost","updatePost","slice","message","id","postIndex","findIndex","post","splice","newData","length","StyledLi","isFetching","ButtonContainer","TextArea","TextAreaBlack","isEditing","setIsEditing","userId","title","body","currentPost","setCurrentPost","setIsFetching","onSaveChanges","value","onChange","e","target","disabled","Button","onClick","color","StyledUl","window","scrollTo","Quote","map","Spinner","size"],"sourceRoot":""}